#!/usr/bin/env node

"use strict";
var config = process.env.ENV_CONFIG || "config.json"
var appConfigs = require('../app/config/' + config)
appConfigs.DropboxKey = process.env.DROPBOX_ACCESS_TOKEN || appConfigs.DropboxKey

//module dependencies.
var app = require("../app/server")(appConfigs);
var debug = require("debug")("express:server");
var http = require("http");

var server_port = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 5002
    //var server_ip_address = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1'

//get port from environment and store in Express.
var port = normalizePort(server_port);
app.set("port", port);
//app.set('ipaddr', server_ip_address)

var server = http.createServer(app);
var socket = require("../app/socket")(server, appConfigs);
//create http server

//listen on provided ports
server.listen(port);
console.log('HTTP & SOCKET SEVER LISTENING ON PORT :  ' + port)

//add error handler
server.on("error", onError);

//start listening on port
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ?
        "Pipe " + port :
        "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ?
        "pipe " + addr :
        "port " + addr.port;
    debug("Listening on " + bind);
}